// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShippingCompany.data;

#nullable disable

namespace ShippingCompany.Migrations
{
    [DbContext(typeof(ShippingCompanyDbContext))]
    [Migration("20241218082832_AgainCreateTables")]
    partial class AgainCreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShippingCompany.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Salt");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Cargo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("DeclaredCargo")
                        .HasColumnType("real")
                        .HasColumnName("DeclaredCargo");

                    b.Property<float>("InsuredCargo")
                        .HasColumnType("real")
                        .HasColumnName("InsuredCargo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<long?>("TypeOfCargoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TypeOfCargoId");

                    b.Property<long?>("UnitOfMeasurementId")
                        .HasColumnType("bigint")
                        .HasColumnName("UnitOfMeasurementId");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfCargoId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.CargoShipment", b =>
                {
                    b.Property<long>("CargoId")
                        .HasColumnType("bigint")
                        .HasColumnName("CargoId");

                    b.Property<long>("ShipmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ShipmentId");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("CargoId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("CargoShipment");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.ClientCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BankId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankId");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("HouseNumber");

                    b.Property<int>("IndividualTaxpayerNumber")
                        .HasColumnType("integer")
                        .HasColumnName("IndividualTaxplayerNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("OfficeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OfficeNumber");

                    b.Property<long?>("StreetId")
                        .HasColumnType("bigint")
                        .HasColumnName("StreetId");

                    b.Property<long?>("TownId")
                        .HasColumnType("bigint")
                        .HasColumnName("TownId");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("StreetId");

                    b.HasIndex("TownId");

                    b.ToTable("ClientCompany");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOfDll")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOfFunction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Port", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Port");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Ship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FullNameOfCaptain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FullNameOfCaptain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhotoPath");

                    b.Property<long?>("PortId")
                        .HasColumnType("bigint")
                        .HasColumnName("PortId");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RegistrationNumber");

                    b.Property<int?>("ShipType")
                        .HasColumnType("integer")
                        .HasColumnName("ShipType");

                    b.Property<int>("Tonnage")
                        .HasColumnType("integer")
                        .HasColumnName("Tonnage");

                    b.Property<int>("YearOfBuilt")
                        .HasColumnType("integer")
                        .HasColumnName("YearOfBuilt");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.ToTable("Ship");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.ShipTypeOfCargo", b =>
                {
                    b.Property<long>("ShipId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeOfCargoId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("ShipId", "TypeOfCargoId");

                    b.HasIndex("TypeOfCargoId");

                    b.ToTable("ShipTypeOfCargos");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ArrivalDate");

                    b.Property<string>("CustomsBatchNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CustomsBatchNumber");

                    b.Property<string>("CustomsDeclarationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CustomsDeclarationNumber");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DepartureDate");

                    b.Property<long?>("DestinationPortId")
                        .HasColumnType("bigint")
                        .HasColumnName("DestinationPortId");

                    b.Property<long?>("ReceivingCompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("ReceivingCompanyId");

                    b.Property<long?>("SendingCompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("SendingCompanyId");

                    b.Property<long?>("SourcePortId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourcePortId");

                    b.Property<long?>("VoyageId")
                        .HasColumnType("bigint")
                        .HasColumnName("VoyageId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationPortId");

                    b.HasIndex("ReceivingCompanyId");

                    b.HasIndex("SendingCompanyId");

                    b.HasIndex("SourcePortId");

                    b.HasIndex("VoyageId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Street", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Town", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.TypeOfCargo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeOfCargo");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.UnitOfMeasurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasurement");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.UserMenuItem", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("MenuItemId");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("CanDelete");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("CanEdit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean")
                        .HasColumnName("CanRead");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("boolean")
                        .HasColumnName("CanWrite");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.HasKey("UserId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("UserMenuItem");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Voyage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DestinationPortId")
                        .HasColumnType("bigint")
                        .HasColumnName("DestinatinPortId");

                    b.Property<long?>("ShipId")
                        .HasColumnType("bigint")
                        .HasColumnName("ShipId");

                    b.Property<long?>("SourcePortId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourcePortId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationPortId");

                    b.HasIndex("ShipId");

                    b.HasIndex("SourcePortId");

                    b.ToTable("Voyage");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.VoyagePort", b =>
                {
                    b.Property<long>("VoyageId")
                        .HasColumnType("bigint");

                    b.Property<long>("PortId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("VoyageId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("VoyagePorts");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Cargo", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.TypeOfCargo", "TypeOfCargo")
                        .WithMany()
                        .HasForeignKey("TypeOfCargoId");

                    b.HasOne("ShippingCompany.domain.entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId");

                    b.Navigation("TypeOfCargo");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.CargoShipment", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.Cargo", "Cargo")
                        .WithMany("CargoShipments")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingCompany.domain.entities.Shipment", "Shipment")
                        .WithMany("CargoShipments")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.ClientCompany", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("ShippingCompany.domain.entities.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");

                    b.HasOne("ShippingCompany.domain.entities.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");

                    b.Navigation("Bank");

                    b.Navigation("Street");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.MenuItem", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.MenuItem", "ParentItem")
                        .WithMany()
                        .HasForeignKey("ParentItemId");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Ship", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.ShipTypeOfCargo", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.TypeOfCargo", "TypeOfCargo")
                        .WithMany("ShipTypeOfCargos")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingCompany.domain.entities.Ship", "Ship")
                        .WithMany("ShipTypeOfCargos")
                        .HasForeignKey("TypeOfCargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");

                    b.Navigation("TypeOfCargo");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Shipment", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.Port", "DestinationPort")
                        .WithMany()
                        .HasForeignKey("DestinationPortId");

                    b.HasOne("ShippingCompany.domain.entities.ClientCompany", "ReceivingCompany")
                        .WithMany()
                        .HasForeignKey("ReceivingCompanyId");

                    b.HasOne("ShippingCompany.domain.entities.ClientCompany", "SendingCompany")
                        .WithMany()
                        .HasForeignKey("SendingCompanyId");

                    b.HasOne("ShippingCompany.domain.entities.Port", "SourcePort")
                        .WithMany()
                        .HasForeignKey("SourcePortId");

                    b.HasOne("ShippingCompany.domain.entities.Voyage", "Voyage")
                        .WithMany()
                        .HasForeignKey("VoyageId");

                    b.Navigation("DestinationPort");

                    b.Navigation("ReceivingCompany");

                    b.Navigation("SendingCompany");

                    b.Navigation("SourcePort");

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.UserMenuItem", b =>
                {
                    b.HasOne("ShippingCompany.Domain.Entities.User", "User")
                        .WithMany("UserMenuItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingCompany.domain.entities.MenuItem", "MenuItem")
                        .WithMany("UserMenuItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Voyage", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.Port", "DestinationPort")
                        .WithMany()
                        .HasForeignKey("DestinationPortId");

                    b.HasOne("ShippingCompany.domain.entities.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId");

                    b.HasOne("ShippingCompany.domain.entities.Port", "SourcePort")
                        .WithMany()
                        .HasForeignKey("SourcePortId");

                    b.Navigation("DestinationPort");

                    b.Navigation("Ship");

                    b.Navigation("SourcePort");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.VoyagePort", b =>
                {
                    b.HasOne("ShippingCompany.domain.entities.Voyage", "Voyage")
                        .WithMany("VoyagePorts")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingCompany.domain.entities.Port", "Port")
                        .WithMany("VoyagePorts")
                        .HasForeignKey("VoyageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("ShippingCompany.Domain.Entities.User", b =>
                {
                    b.Navigation("UserMenuItems");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Cargo", b =>
                {
                    b.Navigation("CargoShipments");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.MenuItem", b =>
                {
                    b.Navigation("UserMenuItems");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Port", b =>
                {
                    b.Navigation("VoyagePorts");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Ship", b =>
                {
                    b.Navigation("ShipTypeOfCargos");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Shipment", b =>
                {
                    b.Navigation("CargoShipments");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.TypeOfCargo", b =>
                {
                    b.Navigation("ShipTypeOfCargos");
                });

            modelBuilder.Entity("ShippingCompany.domain.entities.Voyage", b =>
                {
                    b.Navigation("VoyagePorts");
                });
#pragma warning restore 612, 618
        }
    }
}
